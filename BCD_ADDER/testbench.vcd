$date
Thu May 29 10:22:47 2025
$end
$version
Aldec HDL Simulator Version 15.0.261
$end
$timescale
1 ns
$end

$scope module testbench $end
$var wire 12 ! Sum_Ripple [11:0] $end
$var wire 12 " Sum_CLA [11:0] $end
$var wire 1 # Cout_Ripple $end
$var wire 1 $ Cout_CLA $end
$var reg 1 % clk $end
$var reg 1 & rst $end
$var reg 1 ' cin $end
$var reg 12 ( A [11:0] $end
$var reg 12 ) B [11:0] $end
$var reg 12 * expected_sum [11:0] $end
$var reg 1 + expected_cout $end
$var integer 32 , i $end
$var reg 1 - flag $end

$scope module U1 $end
$var reg 12 . Sum [11:0] $end
$var reg 1 / Cout $end
$var reg 12 0 A_reg [11:0] $end
$var reg 12 1 B_reg [11:0] $end
$var reg 1 2 Cin_reg $end
$var parameter 32 3 n [31:0] $end

$scope begin bcd_1digit[0] $end
$var parameter 32 4 i [31:0] $end

$scope module bcd $end

$scope module adder1 $end

$scope begin addbit[0] $end
$var parameter 32 5 i [31:0] $end
$upscope $end


$scope begin addbit[1] $end
$var parameter 32 6 i [31:0] $end
$upscope $end


$scope begin addbit[2] $end
$var parameter 32 7 i [31:0] $end
$upscope $end


$scope begin addbit[3] $end
$var parameter 32 8 i [31:0] $end
$upscope $end

$upscope $end


$scope module adder2 $end

$scope begin addbit[0] $end
$var parameter 32 9 i [31:0] $end
$upscope $end


$scope begin addbit[1] $end
$var parameter 32 : i [31:0] $end
$upscope $end


$scope begin addbit[2] $end
$var parameter 32 ; i [31:0] $end
$upscope $end


$scope begin addbit[3] $end
$var parameter 32 < i [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin bcd_1digit[1] $end
$var parameter 32 = i [31:0] $end

$scope module bcd $end

$scope module adder1 $end

$scope begin addbit[0] $end
$var parameter 32 > i [31:0] $end
$upscope $end


$scope begin addbit[1] $end
$var parameter 32 ? i [31:0] $end
$upscope $end


$scope begin addbit[2] $end
$var parameter 32 @ i [31:0] $end
$upscope $end


$scope begin addbit[3] $end
$var parameter 32 A i [31:0] $end
$upscope $end

$upscope $end


$scope module adder2 $end

$scope begin addbit[0] $end
$var parameter 32 B i [31:0] $end
$upscope $end


$scope begin addbit[1] $end
$var parameter 32 C i [31:0] $end
$upscope $end


$scope begin addbit[2] $end
$var parameter 32 D i [31:0] $end
$upscope $end


$scope begin addbit[3] $end
$var parameter 32 E i [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin bcd_1digit[2] $end
$var parameter 32 F i [31:0] $end

$scope module bcd $end

$scope module adder1 $end

$scope begin addbit[0] $end
$var parameter 32 G i [31:0] $end
$upscope $end


$scope begin addbit[1] $end
$var parameter 32 H i [31:0] $end
$upscope $end


$scope begin addbit[2] $end
$var parameter 32 I i [31:0] $end
$upscope $end


$scope begin addbit[3] $end
$var parameter 32 J i [31:0] $end
$upscope $end

$upscope $end


$scope module adder2 $end

$scope begin addbit[0] $end
$var parameter 32 K i [31:0] $end
$upscope $end


$scope begin addbit[1] $end
$var parameter 32 L i [31:0] $end
$upscope $end


$scope begin addbit[2] $end
$var parameter 32 M i [31:0] $end
$upscope $end


$scope begin addbit[3] $end
$var parameter 32 N i [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope module U2 $end
$var reg 12 O Sum [11:0] $end
$var reg 1 P Cout $end
$var reg 12 Q A_reg [11:0] $end
$var reg 12 R B_reg [11:0] $end
$var reg 1 S Cin_reg $end
$var parameter 32 T n [31:0] $end

$scope begin bcd_1digit[0] $end
$var parameter 32 U i [31:0] $end

$scope module bcd $end

$scope module add1 $end

$scope begin GP_signal[0] $end
$var parameter 32 V i [31:0] $end
$upscope $end


$scope begin GP_signal[1] $end
$var parameter 32 W i [31:0] $end
$upscope $end


$scope begin GP_signal[2] $end
$var parameter 32 X i [31:0] $end
$upscope $end


$scope begin GP_signal[3] $end
$var parameter 32 Y i [31:0] $end
$upscope $end


$scope begin generate_sum[0] $end
$var parameter 32 Z i [31:0] $end
$upscope $end


$scope begin generate_sum[1] $end
$var parameter 32 [ i [31:0] $end
$upscope $end


$scope begin generate_sum[2] $end
$var parameter 32 \ i [31:0] $end
$upscope $end


$scope begin generate_sum[3] $end
$var parameter 32 ] i [31:0] $end
$upscope $end

$upscope $end


$scope module add2 $end

$scope begin GP_signal[0] $end
$var parameter 32 ^ i [31:0] $end
$upscope $end


$scope begin GP_signal[1] $end
$var parameter 32 _ i [31:0] $end
$upscope $end


$scope begin GP_signal[2] $end
$var parameter 32 ` i [31:0] $end
$upscope $end


$scope begin GP_signal[3] $end
$var parameter 32 a i [31:0] $end
$upscope $end


$scope begin generate_sum[0] $end
$var parameter 32 b i [31:0] $end
$upscope $end


$scope begin generate_sum[1] $end
$var parameter 32 c i [31:0] $end
$upscope $end


$scope begin generate_sum[2] $end
$var parameter 32 d i [31:0] $end
$upscope $end


$scope begin generate_sum[3] $end
$var parameter 32 e i [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin bcd_1digit[1] $end
$var parameter 32 f i [31:0] $end

$scope module bcd $end

$scope module add1 $end

$scope begin GP_signal[0] $end
$var parameter 32 g i [31:0] $end
$upscope $end


$scope begin GP_signal[1] $end
$var parameter 32 h i [31:0] $end
$upscope $end


$scope begin GP_signal[2] $end
$var parameter 32 i i [31:0] $end
$upscope $end


$scope begin GP_signal[3] $end
$var parameter 32 j i [31:0] $end
$upscope $end


$scope begin generate_sum[0] $end
$var parameter 32 k i [31:0] $end
$upscope $end


$scope begin generate_sum[1] $end
$var parameter 32 l i [31:0] $end
$upscope $end


$scope begin generate_sum[2] $end
$var parameter 32 m i [31:0] $end
$upscope $end


$scope begin generate_sum[3] $end
$var parameter 32 n i [31:0] $end
$upscope $end

$upscope $end


$scope module add2 $end

$scope begin GP_signal[0] $end
$var parameter 32 o i [31:0] $end
$upscope $end


$scope begin GP_signal[1] $end
$var parameter 32 p i [31:0] $end
$upscope $end


$scope begin GP_signal[2] $end
$var parameter 32 q i [31:0] $end
$upscope $end


$scope begin GP_signal[3] $end
$var parameter 32 r i [31:0] $end
$upscope $end


$scope begin generate_sum[0] $end
$var parameter 32 s i [31:0] $end
$upscope $end


$scope begin generate_sum[1] $end
$var parameter 32 t i [31:0] $end
$upscope $end


$scope begin generate_sum[2] $end
$var parameter 32 u i [31:0] $end
$upscope $end


$scope begin generate_sum[3] $end
$var parameter 32 v i [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin bcd_1digit[2] $end
$var parameter 32 w i [31:0] $end

$scope module bcd $end

$scope module add1 $end

$scope begin GP_signal[0] $end
$var parameter 32 x i [31:0] $end
$upscope $end


$scope begin GP_signal[1] $end
$var parameter 32 y i [31:0] $end
$upscope $end


$scope begin GP_signal[2] $end
$var parameter 32 z i [31:0] $end
$upscope $end


$scope begin GP_signal[3] $end
$var parameter 32 { i [31:0] $end
$upscope $end


$scope begin generate_sum[0] $end
$var parameter 32 | i [31:0] $end
$upscope $end


$scope begin generate_sum[1] $end
$var parameter 32 } i [31:0] $end
$upscope $end


$scope begin generate_sum[2] $end
$var parameter 32 ~ i [31:0] $end
$upscope $end


$scope begin generate_sum[3] $end
$var parameter 32 !! i [31:0] $end
$upscope $end

$upscope $end


$scope module add2 $end

$scope begin GP_signal[0] $end
$var parameter 32 "! i [31:0] $end
$upscope $end


$scope begin GP_signal[1] $end
$var parameter 32 #! i [31:0] $end
$upscope $end


$scope begin GP_signal[2] $end
$var parameter 32 $! i [31:0] $end
$upscope $end


$scope begin GP_signal[3] $end
$var parameter 32 %! i [31:0] $end
$upscope $end


$scope begin generate_sum[0] $end
$var parameter 32 &! i [31:0] $end
$upscope $end


$scope begin generate_sum[1] $end
$var parameter 32 '! i [31:0] $end
$upscope $end


$scope begin generate_sum[2] $end
$var parameter 32 (! i [31:0] $end
$upscope $end


$scope begin generate_sum[3] $end
$var parameter 32 )! i [31:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 !
b0 "
0#
0$
0%
1&
0'
b0 (
b0 )
bx *
x+
bx ,
1-
b11 3
b0 4
b0 5
b1 6
b10 7
b11 8
b0 9
b1 :
b10 ;
b11 <
b1 =
b0 >
b1 ?
b10 @
b11 A
b0 B
b1 C
b10 D
b11 E
b10 F
b0 G
b1 H
b10 I
b11 J
b0 K
b1 L
b10 M
b11 N
b11 T
b0 U
b0 V
b1 W
b10 X
b11 Y
b0 Z
b1 [
b10 \
b11 ]
b0 ^
b1 _
b10 `
b11 a
b0 b
b1 c
b10 d
b11 e
b1 f
b0 g
b1 h
b10 i
b11 j
b0 k
b1 l
b10 m
b11 n
b0 o
b1 p
b10 q
b11 r
b0 s
b1 t
b10 u
b11 v
b10 w
b0 x
b1 y
b10 z
b11 {
b0 |
b1 }
b10 ~
b11 !!
b0 "!
b1 #!
b10 $!
b11 %!
b0 &!
b1 '!
b10 (!
b11 )!
$end
#5
1%
#10
0%
#15
1%
#20
0&
b0 ,
b10001010110 )
b100100011 (
0+
b101111001000 *
0%
#25
1%
x$
bx "
x#
bx !
#30
0%
#35
1%
bx0 !
#40
0%
#45
1%
#50
0%
#55
1%
bx1 !
#60
0%
#65
1%
bx0 "
0#
#70
0%
#75
1%
0$
bx1xxxxxxxx01 !
#80
0%
#85
1%
bx1 "
bx1xxxxxxx001 !
#90
0%
#95
1%
bx1x1xxx1x001 !
#100
0%
#105
1%
bx1xxxxxxx001 "
b1x1xxx11001 !
#110
0%
#115
1%
b1xxxxx11001 "
b101xx111001 !
#120
0-
b1 ,
b0 )
b0 (
b0 *
0%
#125
1%
b1x1xxx11001 "
#130
0%
#135
1%
#140
0%
#145
1%
b10xxxx11001 "
b101xxx11001 !
#150
0%
#155
1%
b1xxx01100 !
#160
0%
#165
1%
b10xxx111001 "
b0xxxx01100 !
#170
0%
#175
1%
b1xxx1111001 "
#180
0%
#185
1%
b0x000001000 "
b0xx0000110 !
#190
0%
#195
1%
b0x0010110 !
#200
0%
#205
1%
b0 "
b10000 !
#210
0%
#215
1%
b0 !
#220
b10 ,
b100110011001 )
b1 (
1+
0%
#225
1%
#230
0%
#235
1%
#240
0%
#245
1%
#250
0%
#255
1%
b100110011000 !
#260
0%
#265
1%
#270
0%
#275
1%
#280
0%
#285
1%
b100110011000 "
b100110011010 !
#290
0%
#295
1%
b100110011010 "
#300
0%
#305
1%
b100110011100 !
#310
0%
#315
1%
b100110011000 "
b100110001100 !
#320
b11 ,
b10101010101 )
b10101010101 (
b100000000000 *
0%
#325
1%
b100110001000 !
#330
0%
#335
1%
b100110001000 "
#340
0%
#345
1%
b100110000000 "
b100110101000 !
#350
0%
#355
1%
b100110100000 "
b111000 !
#360
0%
#365
1%
b1011000 !
#370
0%
#375
1%
b100110000000 "
b101011000 !
#380
0%
#385
1%
1$
b100110010000 "
1#
b101111110110 !
#390
0%
#395
1%
b101100010000 "
b101011100110 !
#400
0%
#405
1%
b110011001100 !
#410
0%
#415
1%
b100100010000 "
b110111011100 !
#420
b100 ,
b1 )
b100110011001 (
b0 *
0%
#425
1%
b100110011000 !
#430
0%
#435
1%
#440
0%
#445
1%
b100010000 "
#450
0%
#455
1%
b100010001000 !
#460
0%
#465
1%
#470
0%
#475
1%
#480
0%
#485
1%
b0 "
b0 !
#490
0%
#495
1%
#500
0%
#505
1%
#510
0%
#515
1%
#520
b101 ,
b100100000000 )
b100000000 (
0%
#525
1%
#530
0%
#535
1%
#540
0%
#545
1%
#550
0%
#555
1%
b110011000 !
#560
0%
#565
1%
#570
0%
#575
1%
#580
0%
#585
1%
b110011000 "
b111011100 !
#590
0%
#595
1%
b11001100 !
#600
0%
#605
1%
b0 !
#610
0%
#615
1%
b110010000 "
#620
b110 ,
b100100011 )
b1100100001 (
0+
b1000100000 *
0%
#625
1%
b0 "
#630
0%
#635
1%
#640
0%
#645
1%
#650
0%
#655
1%
b101000000010 !
#660
0%
#665
1%
0#
#670
0%
#675
1%
#680
0%
#685
1%
0$
b101000000000 "
b110001000000 !
#690
0%
#695
1%
b111001000000 "
#700
0%
#705
1%
b11001000000 "
b10001000100 !
#710
0%
#715
1%
b10001000100 "
#720
b111 ,
b100010001 )
b100010001000 (
b110011001000 *
0%
#725
1%
#730
0%
#735
1%
#740
0%
#745
1%
#750
0%
#755
1%
b111111011111 !
#760
0%
#765
1%
1#
#770
0%
#775
1%
#780
0%
#785
1%
1$
b110111011101 "
0#
b111111111111 !
#790
0%
#795
1%
0$
b110110011101 "
b111011101111 !
#800
0%
#805
1%
b100010001001 !
#810
0%
#815
1%
b111110011111 "
b101110111001 !
#820
b1000 ,
